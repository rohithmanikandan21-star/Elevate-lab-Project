Web Vulnerability Testing Application – Project Report
Submitted by: Rohith
Course: Cyber Security
Date: 27 October 2025

Abstract

This project focuses on developing a simple web vulnerability testing application using Python and Flask. The tool is designed to crawl web pages, identify potential vulnerabilities such as XSS (Cross-Site Scripting) and SQL Injection, and record its findings in structured JSON files. The main purpose of the project is to understand how automated vulnerability scanning works, how web applications can be tested safely, and how results can be reported in a readable format for analysis. The project was tested using intentionally vulnerable applications like OWASP Juice Shop for educational purposes only.

Introduction: Purpose and Scope

The purpose of this project is to design and implement a basic web vulnerability scanner that can identify common weaknesses in web applications. The project aims to simulate how penetration testers use automated tools to detect flaws in websites. The scope of this tool is limited to safe, non-destructive vulnerability checks that can be used in controlled environments, such as local or lab setups.

The main objectives include:

Understanding how web crawlers collect information.

Learning how to inject and test payloads safely.

Recording results in a structured format for easy interpretation.

Creating an easy-to-use interface to run scans and generate reports.

Tools Used
Tool	Purpose
Python 3	Programming language used to build the scanner.
Flask	Used to build the web interface for running scans.
Requests	For sending HTTP requests and fetching pages.
BeautifulSoup (bs4)	For parsing HTML and extracting input fields and forms.
OWASP Juice Shop	Used as a test target (intentionally vulnerable web app).
ReportLab / Word / PDF Export	For generating final project reports.
Steps Involved

Setting up the environment: Installed Python and Flask, and created a virtual environment in Linux.

Creating the crawler: Developed a module to automatically browse the target website and collect URLs and forms.

Implementing vulnerability checks: Added small payloads to test for XSS and SQL Injection.

Testing with a sample site: Used OWASP Juice Shop to verify detection of basic reflected inputs and errors.

Generating reports: Stored all results in a structured JSON format inside the data/ directory.

Reviewing results: Analysed the reports manually to confirm if reflected inputs were actual vulnerabilities.

Implementation Summary

The project is divided into multiple parts — a crawler, a testing module, and a Flask-based interface. The crawler visits pages and collects data, the test module runs payloads safely to check for responses, and Flask provides an interface for starting scans and viewing results.

Each scan generates a unique ID and stores its results in the folder data/<scan_id>.json. The JSON file contains information like the scanned URLs, detected reflections, and possible database error messages. This structure makes it easy to analyse or visualize the findings later.

Sample Scan Result (Example)

Target: http://localhost:3000

Scan ID: 20251027123045

Findings:

Reflected input detected at http://localhost:3000/search?q=REFL_TEST

Possible SQL error message found at http://localhost:3000/login

Pages Crawled:

http://localhost:3000/

http://localhost:3000/search

http://localhost:3000/login

Discussion

This project helped in understanding how automated scanners collect and test data in a web application. While this tool identifies potential weaknesses, it cannot confirm an actual exploit without manual verification. Some results may be false positives. Through this project, I learned about the basics of HTTP requests, input sanitization, and how insecure coding practices can lead to vulnerabilities.

Conclusion

The project successfully achieved its objective of developing a simple web vulnerability testing application. It demonstrates how basic XSS and SQL injection vulnerabilities can be detected and reported automatically.
In future versions, the scanner can be improved by adding:

Authentication support for login-protected pages.

Better payloads for more accurate detection.

A graphical dashboard to view reports visually.

Overall, this project enhanced my understanding of web security, vulnerability scanning, and ethical testing practices.

References

OWASP Top 10 Web Application Security Risks

OWASP Juice Shop Documentation

Python Requests and BeautifulSoup Documentation

Flask Web Framework Documentation
